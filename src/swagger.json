{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Seans-TypeScript-NodeJS-CRUD-REST-API-Boilerplate",
    "description": "A minimal and easy to follow example of what you need to create a CRUD style API in NodeJs using TypeScript",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Local Dev, or from Heroku"
    },
    {
      "url": "/api/",
      "description": "With docker-compose and nginx proxy"
    }
  ],
  "tags": [
    {
      "name": "Customers",
      "description": "API for customers in the system"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/": {
      "get": {
        "tags": ["root"],
        "summary": "Get API Version Information",
        "description": "Returns a list of the available API versions",
        "operationId": "versions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/definitions/ArrayOfVersions" } }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": ["root"],
        "summary": "Ping for alive",
        "description": "Returns a list of the available API versions",
        "operationId": "versions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/definitions/ServerInfo" } }
            }
          }
        }
      }
    },
    "/api/v1/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get all customers in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customers"
            }
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a new customer in system",
        "requestBody": {
          "description": "Customer Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/v1/customers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the customer that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Customers"],
        "summary": "Get customer with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Customer with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Failed. Customer not found."
          }
        }
      },
      "put": {
        "summary": "Update customer with given ID",
        "tags": ["Customers"],
        "requestBody": {
          "description": "Customer Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Customer with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Customer not found."
          }
        }
      },
      "delete": {
        "summary": "Delete customer with given ID",
        "tags": ["Customers"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Customer with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "404": {
            "description": "Failed. Customer not found."
          }
        }
      }
    }
  },
  "definitions": {
    "schemas": {},
    "id": {
      "properties": {
        "uuid": {
          "type": "string"
        }
      }
    },
    "APIVersion": {
      "type": "object",
      "properties": {
        "version": { "type": "integer", "format": "int64" },
        "path": { "type": "string" }
      }
    },
    "ServerInfo": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "description": { "type": "string" },
        "version": { "type": "string" },
        "uptime": { "type": "number" }
      }
    },
    "ArrayOfVersions": {
      "type": "array",
      "items": { "$ref": "#/definitions/APIVersion" }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "genus": { "type": "string" },
        "name": { "type": "string" },
        "isHungry": { "type": "boolean" },
        "lastFedDate": { "type": "string" }
      }
    },
    "Customers": {
      "type": "object",
      "properties": {
        "customers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Customer"
          }
        }
      }
    }
  }
}
